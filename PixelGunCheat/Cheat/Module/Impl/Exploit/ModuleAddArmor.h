#pragma once
#include <chrono>

#include "../../ModuleBase.h"
#include "../../../Internal/Functions.h"
#include "../../../Data/Armor.h"
#include "../../../Hooks/Hooks.h"
#include "../../../Logger/Logger.h"
#include "../Visual/ModuleNotifications.h"

static inline std::vector<std::wstring> armors = {L""};
static BKCDropdown __add_armor_dropdown = {"Wear Select", armor_names[0].id, armors, "", "General", true };
static BKCCheckbox __add_armor_all = { "Add All", false, "WARNING, THIS MAY TAKE A WHILE" };
static BKCModule __add_armor = { "Add Wearables", "Add wearables to your account. (can cause manual ban)", EXPLOIT, 0x0, false, {&__add_armor_dropdown, &__add_armor_all} };

static bool adding_all = false;
static int add_all_progress = 0;

class ModuleAddArmor : ModuleBase
{
public:
    ModuleAddArmor() : ModuleBase(&__add_armor)
    {
        bool flag = false;
        for (auto armor_name : armor_names)
        {
            if (!flag)
            {
                __add_armor_dropdown.values[0] = armor_name.id;
            }
            else
            {
                __add_armor_dropdown.add_value(armor_name.id);
            }
            flag = true;
        }
    }
    
    void do_module(void* arg) override
    {
        if (ClientUtil::tick % 60 != 0) return;
        if (__add_armor_all.enabled)
        {
            if (!adding_all)
            {
                Logger::log_info("Adding All Wears");
                ModuleNotifications::add_notification("Add Wearable", "Adding all wearables...", 3000);
            }
            adding_all = true;
            int count = -1;
            Logger::log_info("Adding Progress: " + std::to_string(add_all_progress));
            for (auto armor_name : armor_names)
            {
                count++;
                if (count < add_all_progress) continue;
                if (count > add_all_progress + 3)
                {
                    add_all_progress = add_all_progress + 3;
                    break;
                }
                std::wcout << armor_name.id << std::endl;
                Functions::GiveWear(Hooks::create_system_string_w(armor_name.id));
            }
            if (count >= armor_names.size() - 1)
            {
                Logger::log_info("Done Adding");
                ModuleNotifications::add_notification("Add Wearable", "Adding wearables completed!", 3000);
                adding_all = false;
                add_all_progress = 0;
            }
        }
        else
        {
            Functions::GiveWear(Hooks::create_system_string_w(__add_armor_dropdown.current_value));
            ModuleNotifications::add_notification("Add Wearable", "Added wearable '" + std::string(__add_armor_dropdown.current_value.begin(), __add_armor_dropdown.current_value.end()) + "'", 3000);
        }

        if (!adding_all) this->toggle();
    }
};
