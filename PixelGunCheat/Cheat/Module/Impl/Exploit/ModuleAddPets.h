#pragma once
#include <chrono>

#include "../../ModuleBase.h"
#include "../../../Internal/Functions.h"
#include "../../../Data/Pets.h"
#include "../../../Hooks/Hooks.h"

static BKCDropdown __add_pets_dropdown = {"Pet Select", pets_names[0], pets_names, "", "General", true};
static BKCCheckbox __add_pets_all = { "Add All", false };
static BKCModule __add_pets = { "Add Pets", "Add pets to your account. (can cause manual ban)", EXPLOIT, 0x0, false, {&__add_pets_dropdown, &__add_pets_all} };

class ModuleAddPets : ModuleBase
{
public:
    ModuleAddPets() : ModuleBase(&__add_pets) {}
    
    void do_module(void* arg) override
    {
        if (__add_pets_all.enabled)
        {
            ModuleNotifications::add_notification("Add Pets", "Adding all pets...", 3000);
            
            for (auto pet_name : pets_names)
            {
                Functions::GivePets(Hooks::create_system_string_w(pet_name), 9999);
            }

            ModuleNotifications::add_notification("Add Pets", "Added pets completed!", 3000);
        }
        else
        {
            Functions::GivePets(Hooks::create_system_string_w(__add_pets_dropdown.current_value), 9999);
            ModuleNotifications::add_notification("Add Pets", "Added pet '" + std::string(__add_pets_dropdown.current_value.begin(), __add_pets_dropdown.current_value.end()) + "'", 3000);
        }
        this->toggle();
    }
};
