#pragma once
#include "../../ModuleBase.h"
#include "../../../Data/WeaponMods.h"
#include "../../../Hooks/Hooks.h"

static BKCCheckbox __weapon_mods_adder = { "Weapon Mod Mode", false, "Enables adding weapon mod parts (Having this on in a match may crash!)\n1. Enable this\n2. Select desired weapon mod\n3. Open any lottery chest\n4. Profit" };
static BKCDropdown __weapon_mod_list = { "Weapon Mod Select", weapon_mods[0], weapon_mods, "", "General", true };
static BKCCheckbox __unlock_weapon_mods_all = { "Add All Weapon Mods", false };
static BKCSliderInt __lottery_modifier_price = BKCSliderInt("Chest Price", 0, -15000, 15000);
static BKCCheckbox __modify_chest_output = { "Modify Chest Output Amount", false, "Enabling this allows using 'Chest Output Amount', otherwise uses default in-game value for the roll" };
static BKCSliderInt __lottery_modifier_amount = { "Chest Output Amount", 250, -99999, 99999, "This may cause bans at extremely high amounts, untested, use with caution!\n(Only need max 2347 when 'Weapon Mod Mode' is enabled)" };
static BKCModule __price_modifier = { "Lottery Modifier", "Change the parameters of lottery chests. (can cause manual ban)", EXPLOIT, 0x0, false, { &__lottery_modifier_price, &__modify_chest_output, &__lottery_modifier_amount, &__weapon_mods_adder, &__weapon_mod_list /*, &__unlock_weapon_mods_all */ } };

class ModuleLotteryModifier : ModuleBase
{
public:
    ModuleLotteryModifier() : ModuleBase(&__price_modifier) {}
    
    void do_module(void* arg) override
    {
    }

    bool is_mod_add_in_use()
    {
        return __weapon_mods_adder.enabled;
    }

    bool mod_output()
    {
        return __modify_chest_output.enabled;
    }
    
    std::wstring curr_weapon()
    {
        return __weapon_mod_list.current_value;
    }
    
    int lottery_count()
    {
        return __lottery_modifier_amount.value;
    }

    int get_price()
    {
        return __lottery_modifier_price.value;
    }
};
