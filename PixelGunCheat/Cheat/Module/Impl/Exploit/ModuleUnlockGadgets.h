#pragma once

#include "../../ModuleBase.h"
#include "../../../Data/Gadgets.h"
#include "../../../Data/Weapons.h"
#include "../../../Internal/Functions.h"
#include "../../../Hooks/Hooks.h"
#include "../../../Logger/Logger.h"

static BKCDropdown __gadget_list = { "Gadget Select", gadget_names[0], gadget_names, "", "General", true };
static BKCSliderInt __unlock_gadget_level = { "Gadget Level", 1, 1, 65, "YOU CAN NOT DOWNGRADE THE LEVEL AFTER UNLOCKING!" };
static BKCCheckbox __unlock_gadgets_all = {"Add All", false };
static BKCModule __unlock_gadgets = { "Add Gadgets", "Add gadgets to your account. (can cause manual ban)", EXPLOIT, 0x0, false, { &__gadget_list, &__unlock_gadget_level, &__unlock_gadgets_all } };

static bool adding_all_gadgets = false;
static int add_all_progress_gadget = 0;

class ModuleUnlockGadgets : ModuleBase
{
public:
    ModuleUnlockGadgets() : ModuleBase(&__unlock_gadgets) {}
    
    void do_module(void* arg) override
    {
        if (__unlock_gadgets_all.enabled)
        {
            if (!adding_all_gadgets)
            {
                Logger::log_info("Adding All Gadgets");
                ModuleNotifications::add_notification("Add Currency", "Adding all gadgets...", 3000);
            }
            adding_all_gadgets = true;
            int count = -1;
            for (auto gadget_name : gadget_names)
            {
                Functions::GiveGadget(Hooks::create_system_string_w(gadget_name), __unlock_gadget_level.value);
                std::wcout << L"Adding Gadget: " << gadget_name << std::endl;
            }
            if (count >= gadget_names.size() - 1)
            {
                Logger::log_info("Done Adding");
                ModuleNotifications::add_notification("Add Currency", "Finished adding gadgets!", 3000);
                adding_all_gadgets = false;
                add_all_progress_gadget = 0;
            }
        }
        else
        {
            Functions::GiveGadget(Hooks::create_system_string_w(__gadget_list.current_value), __unlock_gadget_level.value);
            ModuleNotifications::add_notification("Add Gadget", "Added gadget '" + std::string(__gadget_list.current_value.begin(), __gadget_list.current_value.end()) + "'", 3000);
        }

        if (!adding_all_gadgets) this->toggle();
    }
};
